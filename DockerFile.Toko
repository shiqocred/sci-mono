# Dockerfile.toko
# Build & run apps/toko (Next.js) from Nx monorepo using standalone output

### --- BASE --- ###
FROM node:20-alpine AS base
WORKDIR /app
ENV PATH="/app/node_modules/.bin:/root/.bun/bin:$PATH"

# Install Bun
RUN apk add --no-cache curl bash && \
    curl -fsSL https://bun.sh/install | bash

### --- DEPENDENCIES --- ###
FROM base AS deps

# Copy root dependencies
COPY package.json bun.lock nx.json tsconfig.base.json .

# Copy needed libs and their configs
COPY libs ./libs
COPY libs/ui/tsconfig.json ./libs/ui/tsconfig.json
COPY libs/ui/project.json ./libs/ui/project.json
COPY libs/auth/tsconfig.json ./libs/auth/tsconfig.json
COPY libs/auth/project.json ./libs/auth/project.json
COPY libs/utils/tsconfig.json ./libs/utils/tsconfig.json
COPY libs/utils/project.json ./libs/utils/project.json
COPY libs/db/tsconfig.json ./libs/db/tsconfig.json
COPY libs/db/project.json ./libs/db/project.json

# Copy toko app
COPY apps/toko ./apps/toko

# Install dependencies with Bun
RUN bun install

### --- BUILD --- ###
FROM deps AS build
ENV NODE_ENV=production

# Aktifkan output: 'standalone' di apps/toko/next.config.js
RUN bunx nx build toko

### --- RUNNER --- ###
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV PATH="/app/node_modules/.bin:/root/.bun/bin:$PATH"

# Install Bun
RUN apk add --no-cache curl bash && \
    curl -fsSL https://bun.sh/install | bash

# Copy standalone output
COPY --from=build /app/dist/apps/toko/.next/standalone ./
COPY --from=build /app/dist/apps/toko/.next/static ./.next/static
COPY --from=build /app/apps/toko/public ./public

EXPOSE 3000
CMD ["node", "server.js"]
